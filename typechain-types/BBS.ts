/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BBSInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "dislike"
      | "latestPostId"
      | "like"
      | "post"
      | "posts"
      | "reply"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "Dislike" | "Like" | "Post" | "Reply"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "dislike",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestPostId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "like", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "post", values: [string]): string;
  encodeFunctionData(functionFragment: "posts", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "reply",
    values: [BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "dislike", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestPostId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "like", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "posts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reply", data: BytesLike): Result;
}

export namespace DislikeEvent {
  export type InputTuple = [postId: BigNumberish, user: AddressLike];
  export type OutputTuple = [postId: bigint, user: string];
  export interface OutputObject {
    postId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LikeEvent {
  export type InputTuple = [postId: BigNumberish, user: AddressLike];
  export type OutputTuple = [postId: bigint, user: string];
  export interface OutputObject {
    postId: bigint;
    user: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PostEvent {
  export type InputTuple = [
    postId: BigNumberish,
    user: AddressLike,
    text: string
  ];
  export type OutputTuple = [postId: bigint, user: string, text: string];
  export interface OutputObject {
    postId: bigint;
    user: string;
    text: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReplyEvent {
  export type InputTuple = [
    postId: BigNumberish,
    user: AddressLike,
    parentPostId: BigNumberish,
    text: string
  ];
  export type OutputTuple = [
    postId: bigint,
    user: string,
    parentPostId: bigint,
    text: string
  ];
  export interface OutputObject {
    postId: bigint;
    user: string;
    parentPostId: bigint;
    text: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BBS extends BaseContract {
  connect(runner?: ContractRunner | null): BBS;
  waitForDeployment(): Promise<this>;

  interface: BBSInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  dislike: TypedContractMethod<[postId: BigNumberish], [void], "nonpayable">;

  latestPostId: TypedContractMethod<[], [bigint], "view">;

  like: TypedContractMethod<[postId: BigNumberish], [void], "nonpayable">;

  post: TypedContractMethod<[text: string], [void], "nonpayable">;

  posts: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  reply: TypedContractMethod<
    [parentPostId: BigNumberish, text: string],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "dislike"
  ): TypedContractMethod<[postId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "latestPostId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "like"
  ): TypedContractMethod<[postId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "post"
  ): TypedContractMethod<[text: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "posts"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "reply"
  ): TypedContractMethod<
    [parentPostId: BigNumberish, text: string],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Dislike"
  ): TypedContractEvent<
    DislikeEvent.InputTuple,
    DislikeEvent.OutputTuple,
    DislikeEvent.OutputObject
  >;
  getEvent(
    key: "Like"
  ): TypedContractEvent<
    LikeEvent.InputTuple,
    LikeEvent.OutputTuple,
    LikeEvent.OutputObject
  >;
  getEvent(
    key: "Post"
  ): TypedContractEvent<
    PostEvent.InputTuple,
    PostEvent.OutputTuple,
    PostEvent.OutputObject
  >;
  getEvent(
    key: "Reply"
  ): TypedContractEvent<
    ReplyEvent.InputTuple,
    ReplyEvent.OutputTuple,
    ReplyEvent.OutputObject
  >;

  filters: {
    "Dislike(uint256,address)": TypedContractEvent<
      DislikeEvent.InputTuple,
      DislikeEvent.OutputTuple,
      DislikeEvent.OutputObject
    >;
    Dislike: TypedContractEvent<
      DislikeEvent.InputTuple,
      DislikeEvent.OutputTuple,
      DislikeEvent.OutputObject
    >;

    "Like(uint256,address)": TypedContractEvent<
      LikeEvent.InputTuple,
      LikeEvent.OutputTuple,
      LikeEvent.OutputObject
    >;
    Like: TypedContractEvent<
      LikeEvent.InputTuple,
      LikeEvent.OutputTuple,
      LikeEvent.OutputObject
    >;

    "Post(uint256,address,string)": TypedContractEvent<
      PostEvent.InputTuple,
      PostEvent.OutputTuple,
      PostEvent.OutputObject
    >;
    Post: TypedContractEvent<
      PostEvent.InputTuple,
      PostEvent.OutputTuple,
      PostEvent.OutputObject
    >;

    "Reply(uint256,address,uint256,string)": TypedContractEvent<
      ReplyEvent.InputTuple,
      ReplyEvent.OutputTuple,
      ReplyEvent.OutputObject
    >;
    Reply: TypedContractEvent<
      ReplyEvent.InputTuple,
      ReplyEvent.OutputTuple,
      ReplyEvent.OutputObject
    >;
  };
}
